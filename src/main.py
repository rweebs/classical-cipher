# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Cipher.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import ciphers.vigenere_standard as vigenere_standard
import ciphers.vigenere_extended as vigenere_extended
import ciphers.one_time_pad as otp
import ciphers.playfair as playfair
import helpers.lib as lib
from PyQt5 import QtCore, QtGui, QtWidgets
import string

class Ui_MainWindow(object):
        """
        Mode Normal dan Mode Enigma Value 0,encrypt,1 decrypt
        Kind value:
        0 = vigenere
        1= vigenere extended
        2 = playfair
        3 = enigma
        Print Type value:
        0 = without spaces
        1 = every 5 characters
        """
        def setupUi(self, MainWindow):
                self.filename=""
                self.extended_vigenere_bytes=bytearray()
                self.output_file=bytearray()
                self.kind=0
                self.mode_normal = 0
                self.mode_enigma = 0
                self.print_type = 0
                self.print_type_2 = 0
                self.isFile = False
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(900, 700)
                font = QtGui.QFont()
                MainWindow.setFont(font)
                MainWindow.setAccessibleName("")
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                font = QtGui.QFont()
                self.centralwidget.setFont(font)
                self.centralwidget.setObjectName("centralwidget")
                self.background = QtWidgets.QLabel(self.centralwidget)
                self.background.setGeometry(QtCore.QRect(0, 0, 900, 700))
                self.background.setText("")
                self.background.setPixmap(QtGui.QPixmap("./images/background.png"))
                self.background.setObjectName("background")
                self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
                self.stackedWidget.setGeometry(QtCore.QRect(380, 20, 501, 661))
                self.stackedWidget.setObjectName("stackedWidget")
                self.normal = QtWidgets.QWidget()
                self.normal.setObjectName("normal")
                self.text_label = QtWidgets.QLabel(self.normal)
                self.text_label.setGeometry(QtCore.QRect(40, 70, 121, 31))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.text_label.setFont(font)
                self.text_label.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.text_label.setObjectName("text_label")
                self.text_input = QtWidgets.QLineEdit(self.normal)
                self.text_input.setGeometry(QtCore.QRect(170, 70, 291, 31))
                self.text_input.setStyleSheet("border: 1px solid #0C145A;\n""")
                self.text_input.setObjectName("text_input")
                self.title = QtWidgets.QLabel(self.normal)
                self.title.setGeometry(QtCore.QRect(0, 10, 501, 41))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.title.setFont(font)
                self.title.setStyleSheet(
"font-style: normal;\n"
"font-weight: bold;\n"
"font-size: 20px;\n"
"line-height: 23px;\n"
"color:#0C145A;")
                self.title.setAlignment(QtCore.Qt.AlignCenter)
                self.title.setObjectName("title")
                self.register_button = QtWidgets.QPushButton(self.normal)
                self.register_button.setGeometry(QtCore.QRect(130, 590, 221, 31))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.register_button.setFont(font)
                self.register_button.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #4D17E2;\n"
"border-radius: 10px;\n"
"color:rgb(255, 255, 255);")
                self.register_button.setObjectName("register_button")
                self.key_label = QtWidgets.QLabel(self.normal)
                self.key_label.setGeometry(QtCore.QRect(40, 110, 121, 31))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.key_label.setFont(font)
                self.key_label.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.key_label.setObjectName("key_label")
                self.key_input = QtWidgets.QLineEdit(self.normal)
                self.key_input.setGeometry(QtCore.QRect(170, 110, 291, 31))
                self.key_input.setStyleSheet("border: 1px solid #0C145A;\n""")
                self.key_input.setObjectName("key_input")
                self.upload_button = QtWidgets.QPushButton(self.normal)
                self.upload_button.setGeometry(QtCore.QRect(120, 160, 111, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.upload_button.setFont(font)
                self.upload_button.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #E7EAF5;\n"
"border-radius: 10px;\n"
"color:#0C145A;")
                self.upload_button.setObjectName("upload_button")
                self.clear_button = QtWidgets.QPushButton(self.normal)
                self.clear_button.setGeometry(QtCore.QRect(270, 160, 111, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.clear_button.setFont(font)
                self.clear_button.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #E7EAF5;\n"
"border-radius: 10px;\n"
"color:#0C145A;")
                self.clear_button.setObjectName("clear_button")
                self.mode_label = QtWidgets.QLabel(self.normal)
                self.mode_label.setGeometry(QtCore.QRect(40, 200, 121, 31))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.mode_label.setFont(font)
                self.mode_label.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.mode_label.setObjectName("mode_label")
                self.encrypt = QtWidgets.QRadioButton(self.normal)
                self.encrypt.setGeometry(QtCore.QRect(170, 200, 271, 20))
                self.encrypt.setStyleSheet(
"font-style: normal;\n"
"color:#0C145A;")
                self.encrypt.setObjectName("encrypt")
                self.decrypt = QtWidgets.QRadioButton(self.normal)
                self.decrypt.setGeometry(QtCore.QRect(170, 230, 271, 20))
                self.decrypt.setStyleSheet(
"font-style: normal;\n"
"color:#0C145A;")
                self.decrypt.setObjectName("decrypt")
                self.widget = QtWidgets.QWidget(self.normal)
                self.widget.setGeometry(QtCore.QRect(170, 250, 241, 80))
                self.widget.setObjectName("widget")
                self.five_input = QtWidgets.QRadioButton(self.widget)
                self.five_input.setGeometry(QtCore.QRect(0, 40, 271, 20))
                self.five_input.setStyleSheet("font-family: Roboto;\n"
"font-style: normal;\n"
"color:#0C145A;")
                self.five_input.setObjectName("five_input")
                self.space_input = QtWidgets.QRadioButton(self.widget)
                self.space_input.setGeometry(QtCore.QRect(0, 10, 271, 20))
                self.space_input.setStyleSheet("font-family: Roboto;\n"
"font-style: normal;\n"
"color:#0C145A;")
                self.space_input.setObjectName("space_input")
                self.print_label = QtWidgets.QLabel(self.normal)
                self.print_label.setGeometry(QtCore.QRect(40, 260, 121, 41))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.print_label.setFont(font)
                self.print_label.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.print_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.print_label.setWordWrap(True)
                self.print_label.setObjectName("print_label")
                self.copy_button = QtWidgets.QPushButton(self.normal)
                self.copy_button.setGeometry(QtCore.QRect(120, 540, 111, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.copy_button.setFont(font)
                self.copy_button.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #E7EAF5;\n"
"border-radius: 10px;\n"
"color:#0C145A;")
                self.copy_button.setObjectName("copy_button")
                self.save_button = QtWidgets.QPushButton(self.normal)
                self.save_button.setGeometry(QtCore.QRect(270, 540, 111, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.save_button.setFont(font)
                self.save_button.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #E7EAF5;\n"
"border-radius: 10px;\n"
"color:#0C145A;")
                self.save_button.setObjectName("save_button")
                self.result_label = QtWidgets.QLabel(self.normal)
                self.result_label.setGeometry(QtCore.QRect(40, 320, 121, 41))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.result_label.setFont(font)
                self.result_label.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.result_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.result_label.setWordWrap(True)
                self.result_label.setObjectName("result_label")
                self.plainTextEdit = QtWidgets.QTextEdit(self.normal)
                self.plainTextEdit.setGeometry(QtCore.QRect(40, 360, 421, 161))
                self.plainTextEdit.setObjectName("plainTextEdit")
                self.stackedWidget.addWidget(self.normal)
                self.sign_in = QtWidgets.QWidget()
                self.sign_in.setEnabled(True)
                self.sign_in.setObjectName("sign_in")
                #NEW
                self.widget_2 = QtWidgets.QWidget(self.sign_in)
                self.widget_2.setGeometry(QtCore.QRect(170, 260, 271, 80))
                self.widget_2.setObjectName("widget_2")
                
                self.space_input_2 = QtWidgets.QRadioButton(self.widget_2)
                self.space_input_2.setGeometry(QtCore.QRect(0, 20, 271, 20))
                self.space_input.setStyleSheet("font-family: Roboto;\n"
"font-style: normal;\n"
"color:#0C145A;")
                self.space_input.setObjectName("space_input_2")
                self.five_input_2 = QtWidgets.QRadioButton(self.widget_2)
                self.five_input_2.setGeometry(QtCore.QRect(0, 45, 271, 20))
                self.five_input.setStyleSheet("font-family: Roboto;\n"
"font-style: normal;\n"
"color:#0C145A;")
                self.five_input_2.setObjectName("five_input_2")
                #NEW
                self.print_label_2 = QtWidgets.QLabel(self.sign_in)
                self.print_label_2.setGeometry(QtCore.QRect(40, 270, 121, 41))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.print_label_2.setFont(font)
                self.print_label_2.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.print_label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.print_label_2.setWordWrap(True)
                self.print_label_2.setObjectName("print_label")
                self.title_2 = QtWidgets.QLabel(self.sign_in)
                self.title_2.setGeometry(QtCore.QRect(0, 10, 501, 41))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.title_2.setFont(font)
                self.title_2.setStyleSheet(
"font-style: normal;\n"
"font-weight: bold;\n"
"font-size: 20px;\n"
"line-height: 23px;\n"
"color:#0C145A;")
                self.title_2.setAlignment(QtCore.Qt.AlignCenter)
                self.title_2.setObjectName("title_2")
                self.rotor_1 = QtWidgets.QSlider(self.sign_in)
                self.rotor_1.setGeometry(QtCore.QRect(170, 50, 22, 131))
                self.rotor_1.setStyleSheet("color:#0C145A;")
                self.rotor_1.setMaximum(25)
                self.rotor_1.setSingleStep(1)
                self.rotor_1.setOrientation(QtCore.Qt.Vertical)
                self.rotor_1.setInvertedAppearance(True)
                self.rotor_1.setInvertedControls(False)
                self.rotor_1.setObjectName("rotor_1")
                self.rotor_1.valueChanged.connect(self.update_1)
                self.rotor_2 = QtWidgets.QSlider(self.sign_in)
                self.rotor_2.setGeometry(QtCore.QRect(240, 50, 22, 131))
                self.rotor_2.setStyleSheet("color:#0C145A;")
                self.rotor_2.setMaximum(25)
                self.rotor_2.setSingleStep(1)
                self.rotor_2.setOrientation(QtCore.Qt.Vertical)
                self.rotor_2.setInvertedAppearance(True)
                self.rotor_2.setInvertedControls(False)
                self.rotor_2.setObjectName("rotor_2")
                self.rotor_2.valueChanged.connect(self.update_2)
                self.rotor_3 = QtWidgets.QSlider(self.sign_in)
                self.rotor_3.setGeometry(QtCore.QRect(310, 50, 22, 131))
                self.rotor_3.setStyleSheet("color:#0C145A;")
                self.rotor_3.setMaximum(25)
                self.rotor_3.setSingleStep(1)
                self.rotor_3.setOrientation(QtCore.Qt.Vertical)
                self.rotor_3.setInvertedAppearance(True)
                self.rotor_3.setInvertedControls(False)
                self.rotor_3.setObjectName("rotor_3")
                self.rotor_3.valueChanged.connect(self.update_3)
                self.position_label = QtWidgets.QLabel(self.sign_in)
                self.position_label.setGeometry(QtCore.QRect(40, 210, 121, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.position_label.setFont(font)
                self.position_label.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.position_label.setObjectName("position_label")
                self.rotor_1_label = QtWidgets.QLabel(self.sign_in)
                self.rotor_1_label.setGeometry(QtCore.QRect(170, 190, 21, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.rotor_1_label.setFont(font)
                self.rotor_1_label.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.rotor_1_label.setAlignment(QtCore.Qt.AlignCenter)
                self.rotor_1_label.setObjectName("rotor_1_label")
                self.rotor_2_label = QtWidgets.QLabel(self.sign_in)
                self.rotor_2_label.setGeometry(QtCore.QRect(240, 190, 21, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.rotor_2_label.setFont(font)
                self.rotor_2_label.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.rotor_2_label.setAlignment(QtCore.Qt.AlignCenter)
                self.rotor_2_label.setObjectName("rotor_2_label")
                self.rotor_3_label = QtWidgets.QLabel(self.sign_in)
                self.rotor_3_label.setGeometry(QtCore.QRect(310, 190, 21, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.rotor_3_label.setFont(font)
                self.rotor_3_label.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.rotor_3_label.setAlignment(QtCore.Qt.AlignCenter)
                self.rotor_3_label.setObjectName("rotor_3_label")
                self.upload_button_3 = QtWidgets.QPushButton(self.sign_in)
                self.upload_button_3.setGeometry(QtCore.QRect(120, 330, 111, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.upload_button_3.setFont(font)
                self.upload_button_3.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #E7EAF5;\n"
"border-radius: 10px;\n"
"color:#0C145A;")
                self.upload_button_3.setObjectName("upload_button_3")
                self.clear_button_3 = QtWidgets.QPushButton(self.sign_in)
                self.clear_button_3.setGeometry(QtCore.QRect(270, 330, 111, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.clear_button_3.setFont(font)
                self.clear_button_3.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #E7EAF5;\n"
"border-radius: 10px;\n"
"color:#0C145A;")
                self.clear_button_3.setObjectName("clear_button_3")
                self.text_label_3 = QtWidgets.QLabel(self.sign_in)
                self.text_label_3.setGeometry(QtCore.QRect(40, 240, 121, 31))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.text_label_3.setFont(font)
                self.text_label_3.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.text_label_3.setObjectName("text_label_3")
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.text_input_3 = QtWidgets.QLineEdit(self.sign_in)
                self.text_input_3.setGeometry(QtCore.QRect(170, 240, 291, 31))
                self.text_input_3.setStyleSheet("border: 1px solid #0C145A;\n""")
                self.text_input_3.setObjectName("text_input_3")
                self.save_button_3 = QtWidgets.QPushButton(self.sign_in)
                self.save_button_3.setGeometry(QtCore.QRect(270, 540, 111, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.save_button_3.setFont(font)
                self.save_button_3.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #E7EAF5;\n"
"border-radius: 10px;\n"
"color:#0C145A;")
                self.save_button_3.setObjectName("save_button_3")
                self.result_label_3 = QtWidgets.QLabel(self.sign_in)
                self.result_label_3.setGeometry(QtCore.QRect(40, 340, 121, 41))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.result_label_3.setFont(font)
                self.result_label_3.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;")
                self.result_label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.result_label_3.setWordWrap(True)
                self.result_label_3.setObjectName("result_label_3")
                self.plainTextEdit_3 = QtWidgets.QTextEdit(self.sign_in)
                self.plainTextEdit_3.setGeometry(QtCore.QRect(40, 380, 421, 141))
                self.plainTextEdit_3.setObjectName("plainTextEdit_3")
                self.register_button_3 = QtWidgets.QPushButton(self.sign_in)
                self.register_button_3.setGeometry(QtCore.QRect(130, 590, 221, 31))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.register_button_3.setFont(font)
                self.register_button_3.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #4D17E2;\n"
"border-radius: 10px;\n"
"color:rgb(255, 255, 255);")
                self.register_button_3.setObjectName("register_button_3")
                self.copy_button_3 = QtWidgets.QPushButton(self.sign_in)
                self.copy_button_3.setGeometry(QtCore.QRect(120, 540, 111, 21))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.copy_button_3.setFont(font)
                self.copy_button_3.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #E7EAF5;\n"
"border-radius: 10px;\n"
"color:#0C145A;")
                self.copy_button_3.setObjectName("copy_button_3")
                self.stackedWidget.addWidget(self.sign_in)
                self.register_button_4 = QtWidgets.QPushButton(self.centralwidget)
                self.register_button_4.setGeometry(QtCore.QRect(80, 350, 221, 31))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.register_button_4.setFont(font)
                self.register_button_4.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #E7EAF5;\n"
"border-radius: 10px;\n"
"color:rgb(0, 0, 0);")
                self.register_button_4.setObjectName("register_button_4")
                self.register_button_5 = QtWidgets.QPushButton(self.centralwidget)
                self.register_button_5.setGeometry(QtCore.QRect(80, 390, 221, 31))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.register_button_5.setFont(font)
                self.register_button_5.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #4D17E2;\n"
"border-radius: 10px;\n"
"color:rgb(255, 255, 255);")
                self.register_button_5.setObjectName("register_button_5")
                self.register_button_6 = QtWidgets.QPushButton(self.centralwidget)
                self.register_button_6.setGeometry(QtCore.QRect(80, 430, 221, 31))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.register_button_6.setFont(font)
                self.register_button_6.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #4D17E2;\n"
"border-radius: 10px;\n"
"color:rgb(255, 255, 255);")
                self.register_button_6.setObjectName("register_button_6")
                self.register_button_7 = QtWidgets.QPushButton(self.centralwidget)
                self.register_button_7.setGeometry(QtCore.QRect(80, 470, 221, 31))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.register_button_7.setFont(font)
                self.register_button_7.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #4D17E2;\n"
"border-radius: 10px;\n"
"color:rgb(255, 255, 255);")
                self.register_button_7.setObjectName("register_button_7")
                self.register_button_8 = QtWidgets.QPushButton(self.centralwidget)
                self.register_button_8.setGeometry(QtCore.QRect(80, 510, 221, 31))
                font = QtGui.QFont()
                
                
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(62)
                self.register_button_8.setFont(font)
                self.register_button_8.setStyleSheet(
"font-style: normal;\n"
"font-weight: 500;\n"
"font-size: 14px;\n"
"line-height: 16px;\n"
"background: #4D17E2;\n"
"border-radius: 10px;\n"
"color:rgb(255, 255, 255);")
                self.register_button_8.setObjectName("register_button_7")
                MainWindow.setCentralWidget(self.centralwidget)

                #COPY
                self.copy_button.clicked.connect(self.copy_content)
                self.copy_button_3.clicked.connect(self.copy_content_2)

                #Tombol Vigenere
                self.register_button_4.clicked.connect(self.click1)

                self.register_button_5.clicked.connect(self.click2)

                self.register_button_6.clicked.connect(self.click3)

                self.register_button_7.clicked.connect(self.click4)

                self.register_button_8.clicked.connect(self.click5)

                #Encrypt Decrypt

                self.encrypt.clicked.connect(self.setEncryptNormal)
                self.decrypt.clicked.connect(self.setDecryptNormal)

                #Add Spaces or Remove Spaces
                self.space_input.clicked.connect(self.setRemoveSpacesNormal)
                self.five_input.clicked.connect(self.setAddSpacesNormal)
                self.space_input_2.clicked.connect(self.setRemoveSpacesEnigma)
                self.five_input_2.clicked.connect(self.setAddSpacesEnigma)

                #Clear
                self.clear_button.clicked.connect(self.clear)
                self.clear_button_3.clicked.connect(self.clear_2)

                #Open FIle
                self.upload_button.clicked.connect(self.open_file)
                self.upload_button_3.clicked.connect(self.open_file_2)

                #Save file
                self.save_button.clicked.connect(self.save_file)
                self.save_button_3.clicked.connect(self.save_file_2)

                self.register_button_3.clicked.connect(self.run_enigma)
                #Run
                self.register_button.clicked.connect(self.run_normal)
                self.retranslateUi(MainWindow)
                self.stackedWidget.setCurrentIndex(0)

                #Enigma Setup
                self.alphabet_list=string.ascii_uppercase
                self.rotor_1_list=['E','P','A','I','B','R','C','K','M','F','L','G','T','O','D','Q','V','Z','N','W','Y','H','X','U','S','J']
                self.rotor_2_list=['A','R','U','X','B','L','H','W','T','M','C','Q','G','J','D','K','S','I','Z','N','P','Y','F','V','O','E']
                self.rotor_3_list=['P','R','T','X','V','Z','N','Y','E','I','W','G','A','K','M','U','S','Q','B','D','F','H','J','L','C','O']
                self.rotor_1_list_temp = []
                self.rotor_2_list_temp = []
                self.rotor_3_list_temp = []
                self.reflector_blist=['Y','R','U','H','Q','S','L','D','P','X','N','G','O','K','M','I','E','B','F','Z','C','W','V','J','A','T']
                self.reverse=False
                self.count_fast=0
                self.count_medium=0
                self.count_fast1=0
                self.count_medium1=0
                self.count_slow1=0
                self.final_msg=[]

                QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "Enigma\'s Cipher"))
                self.text_label.setText(_translate("MainWindow", "Enter message:"))
                self.title.setText(_translate("MainWindow", "Vigenere Cipher"))
                self.register_button.setText(_translate("MainWindow", "Run"))
                self.key_label.setText(_translate("MainWindow", "Enter key:"))
                self.upload_button.setText(_translate("MainWindow", "Open File"))
                self.clear_button.setText(_translate("MainWindow", "Clear"))
                self.mode_label.setText(_translate("MainWindow", "Choose mode:"))
                self.encrypt.setText(_translate("MainWindow", "Encrypt"))
                self.decrypt.setText(_translate("MainWindow", "Decrypt"))
                self.five_input.setText(_translate("MainWindow", "Seperated every 5 character"))
                self.space_input.setText(_translate("MainWindow", "Without Space"))
                self.five_input_2.setText(_translate("MainWindow", "Seperated every 5 character"))
                self.space_input_2.setText(_translate("MainWindow", "Without Space"))
                self.print_label.setText(_translate("MainWindow", "Choose print option:"))
                self.print_label_2.setText(_translate("MainWindow", "Choose print option:"))
                self.copy_button.setText(_translate("MainWindow", "Copy result"))
                self.save_button.setText(_translate("MainWindow", "Save"))
                self.result_label.setText(_translate("MainWindow", "Result:"))
                self.title_2.setText(_translate("MainWindow", "Enigma Cipher"))
                self.position_label.setText(_translate("MainWindow", "Position:"))
                self.rotor_1_label.setText(_translate("MainWindow", "A"))
                self.rotor_2_label.setText(_translate("MainWindow", "A"))
                self.rotor_3_label.setText(_translate("MainWindow", "A"))
                self.upload_button_3.setText(_translate("MainWindow", "Open File"))
                self.clear_button_3.setText(_translate("MainWindow", "Clear"))
                self.text_label_3.setText(_translate("MainWindow", "Enter message:"))
                self.save_button_3.setText(_translate("MainWindow", "Save"))
                self.result_label_3.setText(_translate("MainWindow", "Result:"))
                self.register_button_3.setText(_translate("MainWindow", "Run"))
                self.copy_button_3.setText(_translate("MainWindow", "Copy result"))
                self.register_button_4.setText(_translate("MainWindow", "Vigenere Cipher"))
                self.register_button_5.setText(_translate("MainWindow", "Extended Vigenere Cipher"))
                self.register_button_6.setText(_translate("MainWindow", "Playfair Cipher"))
                self.register_button_7.setText(_translate("MainWindow", "Enigma Cipher"))
                self.register_button_8.setText(_translate("MainWindow", "One Time Pad"))
        
        def show_succ(self, succ):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.setWindowTitle("Success")
                msg.setText(succ)
        
        def copy_content(self):
                cb=QtWidgets.QApplication.clipboard()
                cb.clear(mode=cb.Clipboard)
                cb.setText(self.plainTextEdit.toPlainText(), mode=cb.Clipboard)
                self.show_succ("Content Copied")

        def copy_content_2(self):
                cb=QtWidgets.QApplication.clipboard()
                cb.clear(mode=cb.Clipboard)
                cb.setText(self.plainTextEdit_3.toPlainText(), mode=cb.Clipboard)
                self.show_succ("Content Copied")

        def click1(self):
                self.kind=0
                self.title.setText("Vigenere Cipher")
                self.stackedWidget.setCurrentIndex(0)
                self.register_button_4.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #E7EAF5;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(0, 0, 0);")
                self.register_button_5.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_6.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_7.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_8.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")

        def click2(self):
                self.title.setText("Extended Vigenere Cipher")
                self.stackedWidget.setCurrentIndex(0)
                self.kind=1
                self.register_button_5.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #E7EAF5;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(0, 0, 0);")
                self.register_button_4.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_6.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_7.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_8.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")

        def click3(self):
                self.title.setText("Playfair Cipher")
                self.stackedWidget.setCurrentIndex(0)
                self.kind=2
                self.register_button_6.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #E7EAF5;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(0, 0, 0);")
                self.register_button_4.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_5.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_7.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_8.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")

        def click4(self):
                self.kind=3
                self.register_button_7.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #E7EAF5;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(0, 0, 0);")
                self.register_button_4.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_5.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_6.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_8.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                
                self.stackedWidget.setCurrentIndex(1)

        def click5(self):
                self.title.setText("One Time Pad")
                self.stackedWidget.setCurrentIndex(0)
                self.kind=4
                self.register_button_8.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #E7EAF5;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(0, 0, 0);")
                self.register_button_4.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_5.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_7.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")
                self.register_button_7.setStyleSheet(
                        "font-style: normal;\n"
                        "font-weight: 500;\n"
                        "font-size: 14px;\n"
                        "line-height: 16px;\n"
                        "background: #4D17E2;\n"
                        "border-radius: 10px;\n"
                        "color:rgb(255, 255, 255);")

        def setEncryptNormal(self):
                self.mode_normal = 0
        
        def setDecryptNormal(self):
                self.mode_normal = 1
        
        def setRemoveSpacesNormal(self):
                self.print_type = 0
        
        def setAddSpacesNormal(self):
                self.print_type = 1
        
        def setRemoveSpacesEnigma(self):
                self.print_type_2 = 0
        
        def setAddSpacesEnigma(self):
                self.print_type_2 = 1
        
        def clear(self):
                self.text_input.setText("")
                self.key_input.setText("")
                self.plainTextEdit.setText("")
        def clear_2(self):
                self.rotor_1.setValue(0)
                self.rotor_2.setValue(0)
                self.rotor_3.setValue(0)
                self.text_input_3.setText("")
                self.plainTextEdit_3.setText("")
        def save_file_2(self):
                try:
                        filename =QtWidgets.QFileDialog.getSaveFileName()[0]
                        file = open(filename,'w')
                        file.write(self.plainTextEdit_3.toPlainText())
                        file.close()
                        self.plainTextEdit_3.setText("File Downloaded Successfully")
                except:
                        self.plainTextEdit_3.setText("Download Canceled")

        def save_file(self):
                try:
                        filename =QtWidgets.QFileDialog.getSaveFileName()[0]
                        if ((self.kind == 1) and (self.isFile)):
                                file = open(filename,'wb')
                                file.write(bytes(self.output_file))
                                file.close()
                        else:
                                file = open(filename,'w')
                                file.write(self.plainTextEdit.toPlainText())
                                file.close()
                        self.plainTextEdit.setText("File Downloaded Successfully")
                except:
                        self.plainTextEdit.setText("Download Canceled")
                self.isFile=False
        def open_file(self):
                try:
                        
                        self.filename = QtWidgets.QFileDialog.getOpenFileName()[0]
                        if (self.kind != 1):
                                try:
                                        with open(self.filename, 'rb') as f:
                                                self.plainTextEdit.setText("File uploaded successfully please proceed to generate text")
                                                self.text_input.setText(f.read().decode("utf-8"))
                                except:
                                        self.plainTextEdit.setText("Not a valid utf-8 text file")
                        else:
                                import os
                                extension = os.path.splitext(self.filename)[1]
                                if extension == ".txt":
                                        with open(self.filename, 'rb') as f:
                                                self.plainTextEdit.setText("File uploaded successfully please proceed to generate text")
                                                self.text_input.setText(f.read().decode("utf-8"))
                                else:
                                        self.isFile=True
                                        with open(self.filename, 'rb') as f:
                                                        self.extended_vigenere_bytes=f.read()
                                                        self.plainTextEdit.setText("File uploaded successfully please proceed to generate file")
                except:
                        self.plainTextEdit.setText("Upload canceled")

        def open_file_2(self):
                try:
                        filename = QtWidgets.QFileDialog.getOpenFileName()[0]
                        try:
                                with open(filename, 'rb') as f:
                                        self.plainTextEdit.setText("File uploaded successfully please proceed to generate text")
                                        self.text_input_3.setText(f.read().decode("utf-8"))
                        except:
                                self.plainTextEdit.setText("Not a valid utf-8 text file")
                        
                except:
                        self.plainTextEdit.setText("Upload canceled")               

        def run_normal(self):
                result=""
                # print(self.kind)
                if (self.kind==0):
                        if (len(self.key_input.text()) > len(self.text_input.text())):
                                self.key_input.setText("Invalid Key")
                        else:
                                message = self.text_input.text()
                                key = self.key_input.text()
                                if (self.mode_normal == 0):
                                        result = vigenere_standard.encrypt(lib.remove_non_alphabet(message).upper(), lib.remove_non_alphabet(key).upper())
                                else:
                                        result = vigenere_standard.decrypt(lib.remove_non_alphabet(message).upper(),lib.remove_non_alphabet(key).upper())
                elif (self.kind == 1):
                        message = self.text_input.text()
                        key = self.key_input.text()
                        if (self.isFile):
                                if (self.mode_normal == 0):
                                        self.output_file=vigenere_extended.encrypt(self.extended_vigenere_bytes,key)
                                else:
                                        self.output_file=vigenere_extended.decrypt(self.extended_vigenere_bytes,key)
                                result="File generated successfully please proceed to download"
                        else:
                                if (self.mode_normal == 0):
                                        result=lib.ascii_to_string(vigenere_extended.encrypt(bytearray(lib.string_to_ascii_array(message)),key))
                                else:
                                        result=lib.ascii_to_string(vigenere_extended.decrypt(bytearray(lib.string_to_ascii_array(message)),key))
                elif (self.kind==2):
                        if (len(self.key_input.text()) > len(self.text_input.text())):
                                self.key_input.setText("Invalid Key")
                        else:
                                message = self.text_input.text()
                                key = self.key_input.text()
                                if (self.mode_normal == 0):
                                        result = playfair.encrypt(lib.remove_non_alphabet(message).upper(), lib.remove_non_alphabet(key).upper())
                                else:
                                        result = playfair.decrypt(lib.remove_non_alphabet(message).upper(),lib.remove_non_alphabet(key).upper())
                elif (self.kind==4):
                        if (len(self.key_input.text()) > len(self.text_input.text())):
                                self.key_input.setText("Invalid Key")
                        else:
                                message = self.text_input.text()
                                key = self.key_input.text()
                                if (self.mode_normal == 0):
                                        encrypted = otp.encrypt(lib.remove_non_alphabet(message).upper())
                                        result = encrypted[0]
                                        self.key_input.setText(encrypted[1])
                                else:
                                        result = vigenere_standard.decrypt(lib.remove_non_alphabet(message).upper(),lib.remove_non_alphabet(key).upper())


                if ((self.print_type == 1) and  (self.kind != 1)):
                        result = lib.add_space_every_n_chars(result,5)
                self.plainTextEdit.setText(result)
        #Enigma Machine
        def update_1(self,x):
                x = int(x)
                alphabet_list = string.ascii_uppercase
                self.rotor_1_label.setText(alphabet_list[x])
        def update_2(self,x):
                x = int(x)
                alphabet_list = string.ascii_uppercase
                self.rotor_2_label.setText(alphabet_list[x])
        def update_3(self,x):
                x = int(x)
                alphabet_list = string.ascii_uppercase
                self.rotor_3_label.setText(alphabet_list[x])
        
        def rotor_setting(self,l,m,n):
                self.count_fast1=int(self.rotor_3.value())
                self.count_medium1=int(self.rotor_2.value())
                self.count_slow1=int(self.rotor_1.value())
                for e in range(l-1):
                        self.rotor_1_list.append(self.rotor_1_list[0])
                        del self.rotor_1_list[0]
                        # print("I ran", e)
                self.rotor_1_list_temp = self.rotor_1_list
                self.rotor_1_list=['E','P','A','I','B','R','C','K','M','F','L','G','T','O','D','Q','V','Z','N','W','Y','H','X','U','S','J']
                for f in range(m-1):
                        self.rotor_2_list.append(self.rotor_2_list[0])
                        del self.rotor_2_list[0]
                self.rotor_2_list_temp = self.rotor_2_list
                self.rotor_2_list = ['A','R','U','X','B','L','H','W','T','M','C','Q','G','J','D','K','S','I','Z','N','P','Y','F','V','O','E']
                for g in range(n-1):
                        self.rotor_3_list.append(self.rotor_3_list[0])
                        del self.rotor_3_list[0]   
                self.rotor_3_list_temp = self.rotor_3_list
                self.rotor_3_list=['P','R','T','X','V','Z','N','Y','E','I','W','G','A','K','M','U','S','Q','B','D','F','H','J','L','C','O']
        
        def shift(self):
                self.rotor_3_list_temp.append(self.rotor_3_list_temp[0])
                del self.rotor_3_list_temp[0]
                self.count_fast+=1
        
                self.count_fast1+=1
                if self.count_fast1 == 26:
                        self.rotor_3.setValue(0)
                        self.count_fast1 = 0
                        self.count_medium1 += 1
                        if self.count_medium1 == 26:
                                self.rotor_2.setValue(0)
                                self.count_medium1 = 0
                                self.count_slow1+=1
                                if self.count_slow1 == 26:
                                        self.rotor_1.setValue(0)
                                        self.count_slow1 = 0
                                else:
                                        self.rotor_1.setValue(self.count_slow1)
                                        
                        else:
                                self.rotor_2.setValue(self.count_medium1)
                else:
                        self.rotor_3.setValue(self.count_fast1)

                if self.count_fast%26==0:
                        self.rotor_2_list_temp.append(self.rotor_2_list_temp[0])
                        del self.rotor_2_list_temp[0]

                if self.count_medium%26==0 and self.count_medium!=0:
                    
                        self.rotor_1_list_temp.append(self.rotor_1_list_temp[0])
                        del self.rotor_1_list_temp[0]
        def reflector(self,mssg):
                postref=[]

                for char in mssg:
                        if char in self.alphabet_list:
                                changed_letter=self.reflector_blist[self.alphabet_list.index(char)]
                                postref.append(changed_letter)
                
                self.rotor1(postref)
        def rotor1(self,mssg):
                postr1=[]
        
                if self.reverse==False:
                        for char in mssg:
                        
                                if char in self.alphabet_list:
                                        changed_letter=self.rotor_1_list_temp[self.alphabet_list.index(char)]
                                        postr1.append(changed_letter)   

                        self.reverse=True
                        self.reflector(postr1)        
                else:
                        for char in mssg:
                                if char in self.alphabet_list:
                                        changed_letter=self.alphabet_list[self.rotor_1_list_temp.index(char)]
                                        postr1.append(changed_letter)
                        
                        self.rotor2(postr1)
        
        def rotor2(self,mssg):
                postr2=[]
                if self.reverse==False:
                        for char in mssg:
                                if char in self.alphabet_list:
                                        changed_letter=self.rotor_2_list_temp[self.alphabet_list.index(char)]
                                        postr2.append(changed_letter)   

                        self.rotor1(postr2)        
                else:
                        for char in mssg:
                    
                                if char in self.alphabet_list:
                                        changed_letter=self.alphabet_list[self.rotor_2_list_temp.index(char)]
                                        postr2.append(changed_letter)
                        
                        self.rotor3(postr2)
        def rotor3(self,mssg):
                postr3=[]
        
                if self.reverse==False:
                        for char in mssg:
                                test=[]
                                
                                changed_letter=self.rotor_3_list_temp[self.alphabet_list.index(char)]
                                postr3.append(changed_letter)
                                test.append(postr3[-1])
                                self.rotor2(test)
                                self.shift()

        
                else:
                        for char in mssg:
                                if char in self.alphabet_list:
                                        changed_letter=self.alphabet_list[self.rotor_3_list_temp.index(char)]
                                        postr3.append(changed_letter)
                                
                        self.plugboard(postr3)

        def plugboard(self,mssg):
                postPB=[]
                for char in mssg:
                        if char in self.alphabet_list:
                                postPB.append(char)

        
                if self.reverse==False:
                        self.rotor3(postPB)
                else:
                        self.final_msg.append(postPB)
                        self.reverse=False
        def run_enigma(self):
                self.rotor_setting(self.rotor_1.value() + 1,self.rotor_2.value() + 1,self.rotor_3.value() + 1)
                
                omssg=lib.remove_non_alphabet(self.text_input_3.text().upper())
                mssglst=list(omssg)
                self.plugboard(mssglst)
                flat_list = [item for sublist in self.final_msg for item in sublist]
                result=''.join(flat_list)

                flat_list = []
                self.final_msg = []
                self.count_fast = 0
                self.count_medium = 0
                if (self.print_type_2 == 1):
                        result = lib.add_space_every_n_chars(result,5)
                self.plainTextEdit_3.setText(result)
if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())
